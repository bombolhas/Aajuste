{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.7"
    },
    "colab": {
      "name": "Copy of Ajuste_curvas.ipynb",
      "provenance": []
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nLkrRWXiIz5C"
      },
      "source": [
        "# Ajuste de Curvas"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hoZ3L6TKIz5H"
      },
      "source": [
        "## Código para ajuste polinomial\n",
        "\n",
        "1. usa o método __polyfit__ da Biblioteca __Numpy__"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Nu-LFwH7Iz5H"
      },
      "source": [
        "# importando bibliotecas\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RXTmXpkGIz5J"
      },
      "source": [
        "### Inserindo pares de dados para o ajuste\n",
        "x - variável independente\n",
        "y - variável dependente"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KmLDunAhIz5J",
        "outputId": "ce2117a9-a33e-4700-bc98-fd5acbb9a1f4"
      },
      "source": [
        "points = np.array([(1, 1), (2, 4), (3, 1), (9, 3)])  ### pontos dos dados - pares (x, y)\n",
        "print ('Pontos de dados', points)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Pontos de dados [[1 1]\n",
            " [2 4]\n",
            " [3 1]\n",
            " [9 3]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f1icaEMkIz5L",
        "outputId": "1913011f-309b-4942-93d1-0e5b27a64d70"
      },
      "source": [
        "# apresentando conjunto de dados de cada variável separadamente\n",
        "\n",
        "x = points[:,0]\n",
        "y = points[:,1]\n",
        "print ('Valores de x', x)\n",
        "print ('Valores de y', y)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Valores de x [1 2 3 9]\n",
            "Valores de y [1 4 1 3]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "id": "eh8zvPTzIz5L",
        "outputId": "deda548e-b405-4469-9b73-e93030ac3407"
      },
      "source": [
        "# apresentado os pares de pontos em forma gráfica\n",
        "\n",
        "plt.plot(x,y,'o')\n",
        "plt.xlim([x[0]-1, x[-1] + 1 ])\n",
        "plt.ylim([0,5])\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Tou2pFl8Iz5N"
      },
      "source": [
        "## **Ajuste Polinomial - Método 1**\n",
        "### __Usando biblioteca POLYFIT para realização do ajuste de curvas__\n",
        "\n",
        " i) você deve realizar o ajuste para a base de dados que pretende utilizar como dado de entrada\n",
        "numpy.polyfit (dados de x, dados de y, grau do polinomio)\n",
        "\n",
        " ii)você armazena a função polinomial num registro de memória\n",
        "numpy.poly1d(variável onde armazenou os parâmetros do ajuste)\n",
        "\n",
        " iii) depois utiliza a função ajustada para estimar valores"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KqM0HnCaIz5O",
        "outputId": "fbc37d34-2bad-4cfa-a67b-ff373a556a4d"
      },
      "source": [
        "z = np.polyfit(x, y, 3)                 ### ajusta polinomio de ordem 3\n",
        "f = np.poly1d(z)                        ### f é o objeto da função polinomial ajustada \n",
        "print ('Parametros do ajuste:', z)\n",
        "print ('Função ajustada:', f)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Parametros do ajuste: [  0.43452381  -5.60714286  16.7797619  -10.60714286]\n",
            "Função ajustada:         3         2\n",
            "0.4345 x - 5.607 x + 16.78 x - 10.61\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "L8RAWk4iIz5P"
      },
      "source": [
        "**Utilizando a função ajustada para calcular o valor de y para novos valores de x**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 268
        },
        "id": "O1kJ-YioIz5P",
        "outputId": "be5d5d82-cac1-4909-a755-ce6cab454028"
      },
      "source": [
        "x_new = np.linspace(x[0], x[-1], 50)    ### cria valores de x para serem utilizados no gráfico\n",
        "y_new = f(x_new)                        ### calcula os valores de y a partir da função ajustada para uso no gráfico\n",
        "\n",
        "# plotando gráfico de y versus x\n",
        "plt.plot(x,y,'o', x_new, y_new)\n",
        "plt.xlim([x[0]-1, x[-1] + 1 ])\n",
        "plt.show()\n",
        "\n",
        "#for k in range (0,50):\n",
        "#  print ('x(',k,') = ', x_new[k],' y(',k,') =', y_new[k])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JqsN_oBnIz5Q"
      },
      "source": [
        "## **Ajuste polinomial - Método 2**\n",
        "\n",
        "2. usa o método __curve_fit__ da Biblioteca __scipy__"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        },
        "id": "gStN7b98Iz5Q",
        "outputId": "3b9735a3-ba57-439e-d34f-7928535041c1"
      },
      "source": [
        "import numpy as np\n",
        "from scipy.optimize import curve_fit\n",
        "\n",
        "# ********************************************************************************************\n",
        "## ___ definindo função para cálculo de y utilizando parâmetros de ajuste\n",
        "#def fit_func(x, a, b, c, d):\n",
        "#    return a*x**3 + b*x**2 + c*x + d\n",
        "# ********************************************************************************************\n",
        "\n",
        "# ********************************************************************************************\n",
        "## ___ definindo função para cálculo de y utilizando parâmetros de ajuste\n",
        "def fit_func(x, a, b, c):\n",
        "    return a*x**2 + b*x + c \n",
        "# ********************************************************************************************\n",
        "\n",
        "## __ Usa método curve_fit para cálculo dos parâmetros com base na função definida acima e o conjunto de dados\n",
        "params = curve_fit(fit_func, x, y)\n",
        "\n",
        "# armazena os parâmetros nas memórias a, b, c, e d\n",
        "#[a, b, c, d] = params[0]\n",
        "[a, b, c] = params[0]\n",
        "print ('---------------')\n",
        "#print ('Parametros do ajuste:', a, b, c, d)\n",
        "print ('Parametros do ajuste:', a, b, c)\n",
        "print ('---------------')\n",
        "\n",
        "# calcula valores de y para novos valores de x\n",
        "x_new = np.linspace(x[0], x[-1], 50)        ### cria valores de x para serem utilizados no gráfico\n",
        "#y_new = fit_func(x_new, a, b, c, d)         ### calcula os valores de y a partir da função ajustada para uso no gráfico\n",
        "y_new = fit_func(x_new, a, b, c)         ### calcula os valores de y a partir da função ajustada para uso no gráfico\n",
        "\n",
        "# plota gráfico da função ajustada utilizando novos valores de x e y\n",
        "plt.plot(x,y,'o', x_new, y_new)\n",
        "plt.xlim([x[0]-1, x[-1] + 1 ])\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "---------------\n",
            "Parametros do ajuste: -0.001416430597084517 0.1504249291766111 1.719546742211214\n",
            "---------------\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4mK_5NneIz5R"
      },
      "source": [
        "## Ajuste de função não polinomial Método 1\n",
        "\n",
        "1. usa o método curve_fit da biblioteca scipy para ajuste de função $ a/x^b $"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dvoAA3sCIz5R",
        "outputId": "7e393ccd-bd8a-421d-f6e1-d1ce8666b5f9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 473
        }
      },
      "source": [
        "import numpy as np\n",
        "from math import *\n",
        "from scipy.optimize import curve_fit\n",
        "\n",
        "points = np.array([(1, 0.95), (2, 0.52), (3, 0.35), (4, 0.22)])  ### pontos dos dados - pares (x, y)\n",
        "print ('Pontos de dados', points)\n",
        "\n",
        "# get x and y vectors\n",
        "x = points[:,0]\n",
        "y = points[:,1]\n",
        "print ('Valores de x', x)\n",
        "print ('Valores de y', y)\n",
        "\n",
        "# ********************************************************************************************\n",
        "## ___ definindo função para cálculo de y utilizando parâmetros de ajuste\n",
        "def fit_func(x, a, b):\n",
        "    return a*np.e**(-b*x)+c\n",
        "# ********************************************************************************************\n",
        "\n",
        "params = curve_fit(fit_func, x, y)\n",
        "\n",
        "[a, b] = params[0]\n",
        "print ('---------------')\n",
        "print ('Parametros do ajuste: a =', a,'  b =', b)\n",
        "print ('---------------')\n",
        "print ('Qualidade do ajuste')  # mostra a matriz covariança - diagonal principal apresenta os desvios dos parâmetros e a diagonal inversa mostra a a covariança \n",
        "print (params[1])\n",
        "\n",
        "# calculate new x's and y's\n",
        "x_new = np.linspace(x[0], x[-1], 50)    ### cria valores de x para serem utilizados no gráfico\n",
        "y_new = fit_func(x_new, a, b)         ### calcula os valores de y a partir da função ajustada para uso no gráfico\n",
        "\n",
        "plt.plot(x,y,'o', x_new, y_new)\n",
        "plt.xlim([x[0]-1, x[-1] + 1 ])\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Pontos de dados [[1.   0.95]\n",
            " [2.   0.52]\n",
            " [3.   0.35]\n",
            " [4.   0.22]]\n",
            "Valores de x [1. 2. 3. 4.]\n",
            "Valores de y [0.95 0.52 0.35 0.22]\n",
            "---------------\n",
            "Parametros do ajuste: a = 5.3922834073142205   b = 23.910724980756918\n",
            "---------------\n",
            "Qualidade do ajuste\n",
            "[[-4.16472268e+33 -1.99754582e+33]\n",
            " [-1.99754582e+33 -9.58092433e+32]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cNzp0OfiIz5T"
      },
      "source": [
        "## Atividade a ser realizada em grupo\n",
        "\n",
        "1. Com base nos métodos apresentados, aplique os diferentes métodos para o conjunto de dados disponibilizados no Moodle.\n",
        "\n",
        "(caso tenham habilidades com o R, fiquem a vontade para utilizar)\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pqkdJ75UIz5T"
      },
      "source": [
        "print(np.e**1)"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
